192.168.4.52:6352>slaveof 192.168.4.51 6351 设定为51的从服务器  临时配置 
vim /etc/redis/6379.conf  修改配置文件
282  slaveof 192.168.4.51 6351   永久配置 配置完重启服务
info replication 查看复制信息
一主多从配置一样
把从服务器恢复为独立的数据库服务器
192.168.4.53:6353> slave no one  临时恢复 重启服务恢复
永久恢复的方法 将配置文件注释   282  #slaveof 192.168.4.51 6351

配置带验证(主服务器有连接密码)的主从复制
vim /etc/redis/6379.conf 修改配置文件
501  requirepass 123456   开启密码验证
vim /etc/init.d/redis_6379   注意修改脚本
$CLIEXEC -h 192.168.4.51 -p 6351 -a 123456 shutdown   添加密码
从服务器添加验证
vim /etc/redis/6379.conf
289 masterauth 123456

master_link_status:up

哨兵服务 
监视master,发现master宕机后,将从服务器升级为主服务器,为了节省服务器可以配置从服务器上,也可以单独配置
主配置文价 sentinel.conf
创建主配置文件
vim /etc/sentinel.conf  注意需要配置执行权限

bind 0.0.0.0 所有地址  
port 26379   默认端口
sentinel monitor mysql52(主机名) 192.168.4.52(master服务器IP) 6352(端口) 1(哨兵的数量)
#sentinel auth-pass 123456   连接密码,如没配置密码验证则无需配置

redis-sentinel /etc/sentinel.conf  启用哨兵监控
主从同步加哨兵实现高可用
一主多从,主宕机,如有密码验证,重新分配主,从是无法主的从的,因为从的连接密码是前一台主的连接密码

持久化
redis服务把内存里的数据,保存到硬盘的方式
1.RDB
2.AOF

dump.rdb   数据快照存放文件
按照指定的时间间隔,将内存的数据集快照写入硬盘  快照的术语:snapshot   恢复时文件直接读入内存
时间间隔可以修改
 219 save 900 1     15分钟且有一个key变化  条件达成则将内存的数据存到硬盘里,不达成则不执行
 220 save 300 10     5分钟且有10key改变
 221 save 60 10000   1分钟且有10000个key改变   


 254 dbfilename dump.rdb  定义RDB文件名   /var/lib/redis/6379/dump.rdb
 使用RDB文件恢复数据
 cp /var/lib/redis/6379/  /root/dump.rdb  备份数据
 恢复数据
 /etc/init.d/redis_6379 stop  先停止服务
 rm -rf /var/lib/redis/6379/*  再将原来的数据删除
 cp /root/dump.rdb /var/lib/redis/6379/  在将数据复制到目录下
 /etc/init.d/redis_6379 start   启动服务
 redis-cli -h  登录查看  keys *
 
 RDB优点:高性能的持久化现实---创建一个子进程来执行持久化,先将数据写入临时文件,持久化过程结束后,再用这个临时文件替换上次持久化好的文件,
 过程中主进程不做任何IO操作
 
 RDB的缺点:意外宕机时,丢失最后一次持久化的所有数据
 
 AOF  Append Only File
追加方式记录写操作的文件


启用 AOP命令
config set appendonly yes
config rewrite

登录修改
192.168.4.51:6351> config set appendonly yes  启用
OK
192.168.4.51:6351> config rewrite    写进配置文件
OK 
192.168.4.51:6351> 

 vim /etc/redis/6379.conf
 673 appendonly yes   可以进入配置文件修改
 677 appendfilename "appendonly.aof"
 
/var/lib/redis/6379/appendonly.aof

AOF数据恢复

 [root@mysql51 ~]# scp /var/lib/redis/6379/appendonly.aof   root@192.168.4.53:/root/  将AOP文件发给恢复主机
 [root@mysql53 ~]# /etc/init.d/redis_6379 stop     将53主机服务停止 
 vim /etc/redis/6379.conf   修改配置文件  
 673 appendonly yes   启用AOP
  rm -rf /var/lib/redis/6379/*   将数据删除
  cp /root/appendonly.aof  /var/lib/redis/6379/   将文件复制到目录下
  /etc/init.d/redis_6379 start   开启服务
  [root@mysql53 ~]# redis-cli -h 192.168.4.53 -p 6353   登录查看
192.168.4.53:6353> keys *

优化配置
appendfsync   always    实时记录,并完成磁盘同步
appendfsync   everysec  每秒记录一次,并完成磁盘同步
appendfsync   no        写入aof,不执行磁盘同步

日志文件会不断增大,何时触发日志重写

744 auto-aof-rewrite-percentage 100  再次重写,增长百分比
745 auto-aof-rewrite-min-size 64mb   首次重写触发值,大小达到64mb就会触发,进行缩减

修复AOF文件   /var/lib/redis/6379/appendonly.aof

redis-check-aof --fix /var/lib/redis/6379/appendonly.aof  如果文本内容存在不相关的字母会导致文本错误

AOF优点:可以灵活设置持久方式,出现意外宕机时,仅可能丢失一秒的数据
AOF缺点:持久化文件的体积通常会大于RDB方式,执行fsync策略的速度可能会比RDB方式慢

数据类型
String字符串

统计字串中被设置为1的比特位数量
1G=1024M
1M=1024k
1k=1024B
1字节=8位
192.168.4.53:6353>  setbit bob 0 1(只能0或1)
(integer) 0
192.168.4.53:6353> setbit bob 1 0
(integer) 0
192.168.4.53:6353> setbit bob 2 1
(integer) 0
192.168.4.53:6353> setbit bob 3 0
(integer) 0
192.168.4.53:6353> setbit bob 4 0
(integer) 0
192.168.4.53:6353> setbit bob 5 0
(integer) 0
192.168.4.53:6353> setbit bob 6 1
(integer) 0
192.168.4.53:6353> setbit bob 7 1
(integer) 0
192.168.4.53:6353> bitcount bob(变量)
(integer) 4
场景说明:网站用户登录次数,等
decr key
将key中的值减一,变量不存在  初始值0 则变负数
192.168.4.53:6353> set lin 10
OK
192.168.4.53:6353> decr lin
(integer) 9
192.168.4.53:6353> decr lin
(integer) 8
192.168.4.53:6353> 
将变量的值加一,
192.168.4.53:6353> incr lin
(integer) 8
192.168.4.53:6353> incr lin
(integer) 9
192.168.4.53:6353> 
List列表(让一个变量存多个值)
先进后出

hash表一个变量有多列,每列有不同的值

数据类型	
String 字符串
Set  lin  123  设定变量为123
Setrange lin 2 66   从偏移量开始复写
127.0.0.1:6379> get lin
"1266"    
127.0.0.1:6379> setrange lin 1 9   
(integer) 4
127.0.0.1:6379> get lin
"1966"

127.0.0.1:6379> strlen lin   统计字串长度
(integer) 4

127.0.0.1:6379> append zhi abcde    存在则追加不存在则创建key和值 并返回值的长度
(integer) 5
127.0.0.1:6379> get zhi
"abcde"
127.0.0.1:6379> append zhi 123456
(integer) 11
127.0.0.1:6379> get zhi 
"abcde123456"
对key所存储的字串，设置或清除特定偏移量上的位
Value值可以为1或者0  offset为0~2的32次方之间
Key不存在则创建新的key
127.0.0.1:6379> setbit tom 0 1  
(integer) 0
127.0.0.1:6379> setbit tom 1 0
(integer) 0
127.0.0.1:6379> setbit tom 2 1
(integer) 0
127.0.0.1:6379> bitcount tom  统计字串中被设置1的比特位数量
(integer) 2   可以用来统计网站用户上线的次数等

Decr  key  将key中的值减1，key不存在则先初始化为0，再减1
127.0.0.1:6379> set test 10
OK
127.0.0.1:6379> decr test
(integer) 9
127.0.0.1:6379> 
Decrby  指定减的数值
127.0.0.1:6379> get test
"10"
127.0.0.1:6379> decrby test 5
(integer) 5



字符串截取，不改变值的内容，负数偏移量表示从末尾开始计数，-1表示最后一个字符
127.0.0.1:6379> get zhi
"abcde123456"
127.0.0.1:6379> getrange zhi 0 4
"abcde"
127.0.0.1:6379> getrange zhi -5 -1
"23456"

Incr key 将key的值加一，key不存在则先初始化为0，再加1
127.0.0.1:6379> get test
"9"
127.0.0.1:6379> incr test 
(integer) 10
Incrby 指定给key 增加数值
127.0.0.1:6379> get test
"5"
127.0.0.1:6379> incrby test 25
(integer) 30
127.0.0.1:6379> 

List列表(让一个变量存多个值)
先进后出
lpush   将一个或多个值插入到列表key的表头,key不存在,则创建key
192.168.4.51:6351> lpush dan 1 2 3 4 5 6 
(integer) 6
lrange 从开始位置读取key的值到stop结束
192.168.4.51:6351> lrange dan  0 2   从0位开始,读到2位为止 显示3位
1) "6"
2) "5"
3) "4"
192.168.4.51:6351> lrange dan 0 -1  从开始读到结束为止
192.168.4.51:6351> lrange dan 0 -2 从开始读到倒数第2位为止

lpop 移除并返回列表头数据,key不存在则返回nil
192.168.4.51:6351> lpop dan  
"6"
192.168.4.51:6351> lrange dan 0 -1
1) "5"
2) "4"
3) "3"
4) "2"
5) "1"

192.168.4.51:6351> llen dan  返回列表key的长度
(integer) 5

192.168.4.51:6351> lindex key 0  返回列表中第几个值
(nil)
192.168.4.51:6351> lindex dan 0
"5"
192.168.4.51:6351> lindex dan 3
"2"
192.168.4.51:6351> lindex dan 2
"3"

将列表中第几个 修改值,将key中index位置的值修改为value
192.168.4.51:6351> lset dan 0 1   将dan中第3个值改为 1  原值为5
192.168.4.51:6351> lindex dan 0
"1"
192.168.4.51:6351> lindex dan 0
"5"

将value插入到key的末尾
192.168.4.51:6351> rpush dan a  末行插入a
(integer) 6
192.168.4.51:6351> lrange dan 0 -1
1) "1"
2) "4"
3) "3"
4) "2"
5) "1"
6) "a"

删除并返回key末尾
192.168.4.51:6351> rpop dan    删除末尾的a ,并返回删除的值 
"a"							

hash表
将一个对象存储为hash类型,较于每一个字段都存储成string类型更能节省内存
hset         将hash表中field值设置为value
192.168.4.51:6351> hset ooo google 'www.g.cn'   
(integer) 1
hget    获取hash表中field的值
192.168.4.51:6351> hget ooo google   
"www.g.cn"

hmset  同时给hash表中的多个field 赋值
192.168.4.51:6351> hmset ooo   baidu www.baidu .com xinlang www.sina.com

hget 同时获取多个hash表中的多个值
192.168.4.51:6351> hmget ooo google baidu xinlang  
1) "www.g.cn"
2) (nil)
3) "www.sina.com"

hkeys  返回hash表中所有field名称
192.168.4.51:6351> hkeys zhang
1) "google"
2) "baidu"
3) "xinlang"

hgetall    返回hash 表中所有field的值
192.168.4.51:6351> hgetall zhang
1) "google"
2) "www.g.cn"
3) "baidu"
4) "www.baidu.com"
5) "xinlang"
6) "www.sina.com"

 hvals    返回hash 表中所有field的值
192.168.4.51:6351> hvals zhang
1) "www.g.cn"
2) "www.baidu.com"
3) "www.sina.com"

hdel  删除hash表中多个field的值,不存在则忽略
192.168.4.51:6351> hdel zhang google baidu
(integer) 2





                         























